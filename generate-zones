#!/usr/bin/env python3

import sys
import os
import time
import re
import subprocess
import json
import ipaddress

# Check and parse arguments
if len(sys.argv) is not 4:
    print('Usage:', sys.argv[0], 'DOMAIN-NAME DEFAULT-ZONE-FILE REVERSE-ZONE-FILE', file=sys.stderr)
    sys.exit(127)

domainname = sys.argv[1]
default_zone = sys.argv[2]
reverse_zone = sys.argv[3]

# Get the static node data from ALFRED
output = subprocess.check_output(['alfred-json',
                                  '-r', '158',
                                  '-f', 'json',
                                  '-z'])

# Parse the output from above as JSON data
data = json.loads(output.decode('utf-8'))

# Open the temporary output files
default_zone_file = open(default_zone + '.new', 'w')
reverse_zone_file = open(reverse_zone + '.new', 'w')

# Write headers to zones
date = time.strftime('%Y-%m-%d %H:%M:%S')
for f in (default_zone_file, reverse_zone_file):
    print(';', file=f)
    print('; Automatically generated by "fffd-dns/generate-zones" - DO NOT CHANGE', file=f)
    print('; Generated at ' + date, file=f)
    print(';', file=f)
    print('', file=f)

# Generate AAAA and PTR records for each node
for node in data.values():
    # Distill a valid hostname from the nodes name
    hostname = node['hostname']  # Get the hostname from the node
    hostname = hostname.lower()  # Make it all lowercase
    hostname = re.sub(r'[^a-z0-9\-]', '', hostname)  # Remove all illegal characters

    # Get all published addresses which are IPv6 and private (ULA)
    for address in filter(lambda address: address.version == 6 and address.is_private,
                          (ipaddress.ip_address(address)
                           for address
                           in node['network']['addresses'])):

        # Generate the nodes FQDN
        fqdn = '%s.%s' % (hostname, domainname)

        # Write a AAAA record to default zone
        print('%-32s\tIN\tAAAA\t%s' % (fqdn + '.', address.exploded),
              file=default_zone_file)

        # Write a PTR record to reverse zone
        print('%-32s\tIN\tPTR\t%s' % ('.'.join(reversed(address.exploded.replace(':', ''))) + '.ip6.arpa.', fqdn + '.'),
              file=reverse_zone_file)

# Move temporary output files to final destination
os.rename(default_zone + '.new', default_zone)
os.rename(reverse_zone + '.new', reverse_zone)

